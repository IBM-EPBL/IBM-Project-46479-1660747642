import sys
import numpy as np #Linear Algebra
import pandas as pd #Data Processing
import seaborn as sns #Data Visualizaton.
import pickle
%matplotlib inline
from matplotlib import pyplot as plt
from sklearn.preprocessing import LabelEncoder #LabelEncoding From Sklearm
from sklearn.preprocessing import OneHotEncoder #One-Hot Encoding From Sklearn 
from sklearn.model_selection import train_test_split #split Data in Train & Test Array
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier#ml Algorithm 
from sklearn.metrics import accuracy_score #Calculate Accuracy Score
import sklearn.metrics as metrics #Confusion Matrix

dataset= pd.read_csv("C:\\Users\\DELL\\flightdata.csv")
dataset.info()

dataset.describe()

dataset.isnull().sum()

dataset['DEST'].unique()

plt.scatter(dataset['ARR_DELAY'],dataset['ARR_DEL15'])
plt.xlabel('ARR_DELAY')
plt.ylabel('ARR_DEL15')
plt.title('scatter plot between ARR_DELAY and ARR_DEL15')

dataset = dataset.drop('Unnamed: 25',axis=1)
dataset.isnull().sum()

dataset = dataset[["FL_NUM", "MONTH", "DAY_OF_MONTH", "DAY_OF_WEEK", "ORIGIN", "DEST", "CRS_ARR_TIME","DEP_DEL15", "ARR_DEL15"]]
dataset.isnull().sum()

dataset = dataset.fillna ({'ARR_DEL15': 1})
dataset = dataset.fillna ({'DEP_DEL15': 0})
dataset.iloc[177:185]

import math
for index, row in dataset.iterrows():
    dataset.loc[index, 'CRS_ARR_TIME'] = math.floor(row['CRS_ARR_TIME'] / 100)
dataset.head()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
dataset['DEST'] = le.fit_transform(dataset [ 'DEST'])
dataset['ORIGIN'] =le.fit_transform(dataset ['ORIGIN'])
dataset.head (5)

x=dataset.iloc[:, 4:5].values
y=dataset.iloc[:, 5:6].values
x.shape

dataset =pd.get_dummies (dataset, columns=['ORIGIN', 'DEST']) 
dataset.head()

x=dataset.iloc[:, 0:8].values
y=dataset.iloc[:, 8:9].values
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y, test_size=0.2, random_state=0)
x_test.shape

from sklearn.preprocessing import StandardScaler
sc= StandardScaler()
x_train= sc.fit_transform(x_train)
x_test=sc.transform(x_test)
!pip install imblearn

import imblearn
from imblearn.over_sampling import SMOTE
smote=SMOTE()
x_train_smote,y_train_smote =smote.fit_resample(x_train,y_train)
from sklearn.tree import DecisionTreeClassifier
classifier =DecisionTreeClassifier(random_state=0)
classifier.fit(x_train_smote,y_train_smote)

decisiontree = classifier.predict(x_test)
from sklearn.metrics import accuracy_score
acc = accuracy_score(y_test,decisiontree)
acc

from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_test,decisiontree)
cm

import pickle
pickle.dump(classifier,open('flight.pkl','wb'))